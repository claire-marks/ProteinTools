#! /usr/bin/env python3

from protmod import webtools
from Bio import PDB

description="""
-------------------------------------------------
SequenceMapper

Python program to map a protein sequence to its
PDB file, i.e. giving a residue number for each 
residue in the sequence.

Examples: 
    LoopFinder --pdbcodes 1lo4 12e8 2dqu
    
    LoopFinder --pdbfiles 1lo4.pdb

by Claire Marks (marks@stats.ox.ac.uk)
-------------------------------------------------
"""       

if __name__ == "__main__":
    import sys, os, subprocess
    import argparse

    # Add arguments
    # User must provide either a pdb code (structure will be downloaded from web), or a pdb file, not both
    parser = argparse.ArgumentParser(prog="SequenceMapper", description=description, formatter_class=argparse.RawDescriptionHelpFormatter)
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--pdbcode', type=str, nargs="*", dest="pdbcodes", help="The PDB code(s) of the proteins for which you wish to identify loops. Structures will be downloaded from the PDB website.")
    group.add_argument('--pdbfile', type=str, nargs="*", dest="pdbfiles", help="The PDB file(s) of the proteins for which you wish to identify loops")
    
    parser.add_argument('--seq', '-s', type=str, dest="sequence", help="The sequence to be mapped to the PDB structure file.")
    parser.add_argument('--chain', '-c', type=str, dest="chain", help="The chain identifier of the relevant chain in the PDB file. Default is 'A'.", default="A")
    parser.add_argument('--outfile', '-o', dest="outfile", default=None, help="The path to the file to which results should be written. If not specified, results are printed to the terminal.")

    
    # Argument processing
    if len( sys.argv ) ==1:
        parser.print_help()
        sys.exit(0)
    
    args = parser.parse_args()
    
    if args.pdbcode:
        # Download PDB structures from web first
        pdbfile = webtools.download_pdb_structure(args.pdbcode)
        if pdbfile:
            structure = 
    elif args.pdbfile:
        for pdbfile in args.pdbfiles:
            # Find loops!
            result = loops.find_loops(pdbfile, 
                                      max_ss_len=args.max_ss_len, 
                                      min_length=args.min_length,
                                      max_length=args.max_length,
                                      remove_termini=args.ignore_termini,
                                      check_missing= not args.dont_check_missing)
            write_result(pdbfile, result, args.outfile)
    
